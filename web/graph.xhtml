<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:a="http://xmlns.jcp.org/jsf/passthrough"
      xmlns:p="http://primefaces.org/ui">

    <h:head>
        <title>BPMN Path Extractor - Main Page</title>
        <style type="text/css">
            body, html {
                height: 100%;
                margin: 0;
            }
            .main-form {
                font-size: 8pt;
                text-align: center;
            }
            .activity {
                border: 1.5pt solid black;
                width: 80pt;
                height: 50pt;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 10pt;
            }
            .gateway {
                border: 1.5pt solid black;
                width: 50pt;
                height: 50pt;
                display: flex;
                align-items: center;
                justify-content: center;
                background: url(../resources/gateway-cross.png) no-repeat center;
                background-size: cover;
                transform: rotate(45deg) scale(0.7);
            }
            .start-event {
                border: 1.5pt solid black;
                width: 50pt;
                height: 50pt;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
            }
            .intermediate-event {
                border: 2.9pt double black;
                width: 48pt;
                height: 48pt;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
            }
            .end-event {
                border: 2.9pt solid black;
                width: 48pt;
                height: 48pt;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
            }
            .diagram {
                height: inherit;
                min-width: inherit;
                width: 5000pt;
            }
            .ui-toolbar {
                background: #3A4047;
                border-color: #3A4047;
            }
            .ui-fileupload-content .ui-progressbar {
                width: 0;
                height: 0;
                margin: 0;
            }
            .ui-fileupload-buttonbar {
                background: transparent none;
                border: none;
            }
            .ui-fileupload-content {
                display: none;
            }
            .ui-fileupload-buttonbar .ui-fileupload-choose {
                background: #3A4047;
                border: none;
                color: white;
                text-shadow: none;
                box-shadow: none;
            }
            .ui-fileupload-buttonbar .ui-fileupload-upload {
                background: #3A4047;
                border: none;
                color: white;
                text-shadow: none;
                box-shadow: none;
            }
            .ui-fileupload-buttonbar .ui-fileupload-cancel {
                background: #3A4047;
                border: none;
                color: white;
                text-shadow: none;
                box-shadow: none;
            }
            .ui-panel-grid-blank {
                margin: 0 auto;
            }
            .ui-layout-unit-content.ui-widget-content {
                height: 500pt;
                background: #f9fafc;
            }
            .ui-layout-unit-header.ui-widget-header.ui-corner-all {
                background: #B8BFC6;
                border-color: #B8BFC6;
                color: #3A4047;
                text-shadow: none;
                box-shadow: none;
                border-radius: 0;
            }
            .ui-button, button.ui-button.ui-state-default,
            .ui-button.ui-state-default.toolbar-button {
                background: #3A4047;
                border: none;
                color: white;
                text-shadow: none;
                box-shadow: none;
            }
            .ui-layout-resizer.ui-layout-resizer-west.ui-layout-resizer-open.ui-layout-resizer-west-open {
                background: #f9fafc;
            }
            .ui-icon {
                background-image: url(../resources/icons.png) !important;
            }

        </style>
    </h:head>

    <h:body>

        <h:form id="mainForm" styleClass="main-form">

            <p:toolbar id="toolbar">
                <f:facet name="left">
                    <p:fileUpload fileUploadListener="#{diagramView.createModel}" allowTypes="/(\.|\/)(bpmn)$/" update="mainForm:name mainForm:deepness mainForm:pools mainForm:lanes"/>
                </f:facet>
                <f:facet name="right">
                    <p:commandButton value="Draw Diagram" actionListener="#{diagramView.drawDiagram}" update="mainForm:diagram" icon="ui-icon-pencil"/>
                    <p:button value="Set Activities Properties" outcome="properties" icon="ui-icon-wrench"/>
                    <p:commandButton value="Extract Paths" type="button" onclick="PF('extractPathsDialog').show();" icon="ui-icon ui-icon-gear"/>
                </f:facet>

            </p:toolbar>

            <p:sticky target="toolbar"/>

            <p:dialog header="Extraction Parameters" widgetVar="extractPathsDialog" resizable="false">

                <p:panelGrid columns="2" cellpadding="5" styleClass="ui-panelgrid-blank">
                    <p:outputLabel for="name" value="Name"/>
                    <p:outputLabel id="name" value="#{checkBoxView.name}"/>
                    <p:outputLabel for="deepness" value="Deepness"/>
                    <p:autoComplete id="deepness" dropdown="true" value="#{checkBoxView.selectedDeepness}" completeMethod="#{checkBoxView.completeDeepnessList}"/>
                    <p:outputLabel for="pools" value="Pools"/>
                    <p:selectManyCheckbox id="pools" value="#{checkBoxView.selectedPools}" layout="grid" columns="3">
                        <f:selectItems value="#{checkBoxView.pools}" var="pool" itemLabel="#{pool}" itemValue="#{pool}"/>
                    </p:selectManyCheckbox>
                    <p:outputLabel for="lanes" value="Lanes"/>
                    <p:selectManyCheckbox id="lanes" value="#{checkBoxView.selectedLanes}" layout="grid" columns="3">
                        <f:selectItems value="#{checkBoxView.lanes}" var="lane" itemLabel="#{lane}" itemValue="#{lane}"/>
                    </p:selectManyCheckbox>
                </p:panelGrid>

                <p:commandButton value="OK" action="#{checkBoxView.sendExtractionRequest}" onclick="PF('extractPathsDialog').hide();" icon="ui-icon-check"/>

            </p:dialog>

            <p:layout>

                <p:layoutUnit position="center" header="BPMN Graph" gutter="0">
                    <p:diagram id="diagram" value="#{diagramView.model}" styleClass="diagram"/>
                </p:layoutUnit>

                <p:layoutUnit position="west" header="Paths List" size="300" gutter="0">
                </p:layoutUnit>

            </p:layout>

        </h:form>

    </h:body>

    <script type="text/javascript">
        function createClass(selector, style) {
            if (!document.styleSheets) return;
            if (document.getElementsByTagName('head').length === 0) return;

            var styleSheet,mediaType;

            if (document.styleSheets.length > 0) {
                for (var i = 0, length = document.styleSheets.length; i &lt; length; i++) {
                    if (document.styleSheets[i].disabled)
                        continue;
                    var media = document.styleSheets[i].media;
                    mediaType = typeof media;

                    if (mediaType === 'string') {
                        if (media === '' || (media.indexOf('screen') !== -1)) {
                            styleSheet = document.styleSheets[i];
                        }
                    }
                    else if (mediaType ==='object') {
                        if (media.mediaText === '' || (media.mediaText.indexOf('screen') !== -1)) {
                            styleSheet = document.styleSheets[i];
                        }
                    }

                    if (typeof styleSheet !== 'undefined')
                        break;
                }
            }

            if (typeof styleSheet === 'undefined') {
                var styleSheetElement = document.createElement('style');
                styleSheetElement.type = 'text/css';
                document.getElementsByTagName('head')[0].appendChild(styleSheetElement);

                for (i = 0; i &lt; document.styleSheets.length; i++) {
                    if (document.styleSheets[i].disabled) {
                        continue;
                    }
                    styleSheet = document.styleSheets[i];
                }

                mediaType = typeof styleSheet.media;
            }

            if (mediaType === 'string') {
                for (var i = 0, l = styleSheet.rules.length; i &lt; l; i++) {
                    if(styleSheet.rules[i].selectorText &amp;&amp; styleSheet.rules[i].selectorText.toLowerCase() === selector.toLowerCase()) {
                        styleSheet.rules[i].style.cssText = style;
                        return;
                    }
                }
                styleSheet.addRule(selector,style);
            }
            else if (mediaType === 'object') {
                var styleSheetLength = (styleSheet.cssRules) ? styleSheet.cssRules.length : 0;
                for (var i = 0; i &lt; styleSheetLength; i++) {
                    if (styleSheet.cssRules[i].selectorText &amp;&amp; styleSheet.cssRules[i].selectorText.toLowerCase() === selector.toLowerCase()) {
                        styleSheet.cssRules[i].style.cssText = style;
                        return;
                    }
                }
                styleSheet.insertRule(selector + '{' + style + '}', styleSheetLength);
            }
        }
    </script>

</html>
